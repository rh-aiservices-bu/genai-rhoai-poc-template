apiVersion: batch/v1
kind: Job
metadata:
  name: create-and-apply-resources
  namespace: primer
spec:
  backoffLimit: 8
  template:
    spec:
      serviceAccount: project-creator
      serviceAccountName: project-creator
      containers:
      - name: create-and-apply-resources
        image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
        - -ec
        - |-
          # This needs to be a job so we can pull the dashboard route and apply it

          echo -n 'Waiting for rhods-dashboard route'
          while [ -z "$(oc get route -n redhat-ods-applications rhods-dashboard -oname 2>/dev/null ||:)" ]; do
            echo -n .
            sleep 5
          done; echo

          DASHBOARD_ROUTE=https://$(oc get route rhods-dashboard -n redhat-ods-applications -o jsonpath='{.spec.host}')

          # Define some variables
          WORKBENCH_NAME="anythingllm-workbench"
          WORKBENCH_IMAGE="anythingllm-workbench:1.3"

          # Construct dynamic variables
          USER_NAME="user1"
          USER_PROJECT="demo"

          echo "Generating and apply resources for $USER_NAME..."

          # Apply role bindings
          cat << EOF | oc apply -f-
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: admin
            namespace: $USER_PROJECT
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: $USER_NAME
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: demo-setup
            namespace: $USER_PROJECT
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: demo-setup-edit
            namespace: $USER_PROJECT
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: edit
          subjects:
          - kind: ServiceAccount
            name: demo-setup
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: demo-setup-route-reader-binding-$USER_PROJECT
          subjects:
          - kind: ServiceAccount
            name: demo-setup
            namespace: $USER_PROJECT
          roleRef:
            kind: ClusterRole
            name: route-reader
            apiGroup: rbac.authorization.k8s.io
          ---
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: elyra-pipelines-$WORKBENCH_NAME
            namespace: $USER_PROJECT
            labels:
              opendatahub.io/dashboard: 'true'
          subjects:
            - kind: ServiceAccount
              name: $WORKBENCH_NAME
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: ds-pipeline-user-access-dspa
          EOF

          echo -n 'Waiting for KServe Access Token'
          while true; do
              api_key="$(oc get secret access-model-sa -n $USER_PROJECT -ogo-template='{{ .data.token | base64decode }}' 2>/dev/null ||:)"
              echo -n .
              if [ -n "$api_key" ]; then
                  break
              fi
              sleep 5
          done; echo

          echo -n 'Waiting for public model route'
          while true; do
              route="$(oc get route -n istio-system -l serving.knative.dev/route=aligned-granite-predictor -ojsonpath='{items[0].status.ingress[0].host}' 2>/dev/null ||:)"
              echo -n .
              if [ -n "$route" ]; then
                  break
              fi
              sleep 5
          done; echo

          # Create the secret for anythingLLM
          cat << EOF | oc apply -f-
          ---
          kind: Secret
          apiVersion: v1
          metadata:
            name: aligned-granite-endpoint
            namespace: $USER_PROJECT
            labels:
              opendatahub.io/dashboard: 'true'
            annotations:
              opendatahub.io/connection-type-ref: anythingllm-generic-openai
              openshift.io/description: Connect to the aligned Granite model
              openshift.io/display-name: RHOAI-Hosted Aligned Granite
          stringData:
            DISABLE_TELEMETRY: "true"
            GENERIC_OPEN_AI_MODEL_PREF: aligned-granite
            LLM_PROVIDER: generic-openai
            GENERIC_OPEN_AI_BASE_PATH: "https://${route}/v1"
            EMBEDDING_ENGINE: native
            GENERIC_OPEN_AI_API_KEY: "${api_key}"
            GENERIC_OPEN_AI_MODEL_TOKEN_LIMIT: "4096"
            VECTOR_DB: lancedb
            GENERIC_OPEN_AI_MAX_TOKENS: "2048"
          type: Opaque

          EOF

          echo "Generating Workbenches"

          # Create the workbench PVC
          cat << EOF | oc apply -f-
          kind: PersistentVolumeClaim
          apiVersion: v1
          metadata:
            annotations:
              openshift.io/description: ''
              openshift.io/display-name: My Workbench
              volume.beta.kubernetes.io/storage-provisioner: openshift-storage.rbd.csi.ceph.com
              volume.kubernetes.io/storage-provisioner: openshift-storage.rbd.csi.ceph.com
            name: $WORKBENCH_NAME
            namespace: $USER_PROJECT
            finalizers:
              - kubernetes.io/pvc-protection
            labels:
              opendatahub.io/dashboard: 'true'
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            # storageClassName: ocs-storagecluster-ceph-rbd
            volumeMode: Filesystem
          EOF

          # Create the workbench
          cat << EOF | oc apply -f-
          apiVersion: kubeflow.org/v1
          kind: Notebook
          metadata:
            annotations:
              notebooks.opendatahub.io/inject-oauth: 'true'
              opendatahub.io/image-display-name: CUSTOM - AnythingLLM Workbench
              notebooks.opendatahub.io/oauth-logout-url: >-
                $DASHBOARD_ROUTE/projects/$USER_PROJECT?notebookLogout=$WORKBENCH_NAME
              opendatahub.io/accelerator-name: ''
              openshift.io/description: 'A Custom Workbench to interact with an LLM'
              openshift.io/display-name: My Workbench
              notebooks.opendatahub.io/last-image-selection: '$WORKBENCH_IMAGE'
              notebooks.opendatahub.io/last-size-selection: Standard
              opendatahub.io/username: $USER_NAME
            name: $WORKBENCH_NAME
            namespace: $USER_PROJECT
            labels:
              app: $WORKBENCH_NAME
              opendatahub.io/dashboard: 'true'
              opendatahub.io/odh-managed: 'true'
              opendatahub.io/user: $USER_NAME
          spec:
            template:
              spec:
                affinity: {}
                containers:
                  - resources:
                      limits:
                        cpu: '4'
                        memory: 16Gi
                      requests:
                        cpu: '2'
                        memory: 10Gi
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /notebook/$USER_PROJECT/$WORKBENCH_NAME/api
                        port: notebook-port
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    name: $WORKBENCH_NAME
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /notebook/$USER_PROJECT/$WORKBENCH_NAME/api
                        port: notebook-port
                        scheme: HTTP
                      initialDelaySeconds: 10
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    envFrom:
                      - secretRef:
                          name: aligned-granite-endpoint
                    env:
                      - name: NOTEBOOK_ARGS
                        value: |-
                          --ServerApp.port=8888
                                            --ServerApp.token=''
                                            --ServerApp.password=''
                                            --ServerApp.base_url=/notebook/$USER_PROJECT/$WORKBENCH_NAME
                                            --ServerApp.quit_button=False
                                            --ServerApp.tornado_settings={"user":"$USER_NAME","hub_host":"$DASHBOARD_ROUTE","hub_prefix":"/projects/$USER_PROJECT"}
                      - name: JUPYTER_IMAGE
                        value: >-
                          image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/$WORKBENCH_IMAGE
                    ports:
                      - containerPort: 8888
                        name: notebook-port
                        protocol: TCP
                    imagePullPolicy: Always
                    volumeMounts:
                      - mountPath: /opt/app-root/src
                        name: $WORKBENCH_NAME
                    image: >-
                      image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/$WORKBENCH_IMAGE
                    workingDir: /opt/app-root/src
                  - resources:
                      limits:
                        cpu: 100m
                        memory: 64Mi
                      requests:
                        cpu: 100m
                        memory: 64Mi
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /oauth/healthz
                        port: oauth-proxy
                        scheme: HTTPS
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    name: oauth-proxy
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /oauth/healthz
                        port: oauth-proxy
                        scheme: HTTPS
                      initialDelaySeconds: 30
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    env:
                      - name: NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    ports:
                      - containerPort: 8443
                        name: oauth-proxy
                        protocol: TCP
                    imagePullPolicy: Always
                    volumeMounts:
                      - mountPath: /etc/oauth/config
                        name: oauth-config
                      - mountPath: /etc/tls/private
                        name: tls-certificates
                    image: >-
                      registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4bef31eb993feb6f1096b51b4876c65a6fb1f4401fee97fa4f4542b6b7c9bc46
                    args:
                      - '--provider=openshift'
                      - '--https-address=:8443'
                      - '--http-address='
                      - '--openshift-service-account=$WORKBENCH_NAME'
                      - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
                      - '--cookie-expire=24h0m0s'
                      - '--tls-cert=/etc/tls/private/tls.crt'
                      - '--tls-key=/etc/tls/private/tls.key'
                      - '--upstream=http://localhost:8888'
                      - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
                      - '--email-domain=*'
                      - '--skip-provider-button'
                      - >-
                        --openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"$WORKBENCH_IMAGE","namespace":"$USER_PROJECT"}
                      - >-
                        --logout-url=$DASHBOARD_ROUTE/projects/$USER_PROJECT?notebookLogout=$WORKBENCH_IMAGE
                enableServiceLinks: false
                serviceAccountName: $WORKBENCH_NAME
                tolerations:
                  - effect: NoSchedule
                    key: notebooksonly
                    operator: Exists
                volumes:
                  - name: $WORKBENCH_NAME
                    persistentVolumeClaim:
                      claimName: $WORKBENCH_NAME
                  - name: oauth-config
                    secret:
                      defaultMode: 420
                      secretName: $WORKBENCH_NAME-oauth-config
                  - name: tls-certificates
                    secret:
                      defaultMode: 420
                      secretName: $WORKBENCH_NAME-tls
            readyReplicas: 1

          EOF

          sleep 20

      restartPolicy: Never
